[{"id": "complete", "parent": "#", "text": "complete", "type": "default"}, {"id": "complete/bash_", "parent": "complete", "text": "bash", "type": "module", "help": "usage: bash [-h] [-v] [-g] [-l]\n\n    Generate auto-completion material for bash.\n    \n\noptional arguments:\n  -h, --help      show this help message and exit\n  -v, --verbose   show extra information\n  -g, --generate  generate output with newlines\n\nmodule arguments:\n  -l, --list      list module directories\n"}, {"id": "decode", "parent": "#", "text": "decode", "type": "default"}, {"id": "decode/base64_", "parent": "decode", "text": "base64", "type": "module", "help": "usage: base64 [-h] [-v] [-i] [-g]\n\n    Base64 decode input data.\n    \n\noptional arguments:\n  -h, --help      show this help message and exit\n  -v, --verbose   show extra information\n  -i, --iterate   iterate input over newlines\n  -g, --generate  generate output with newlines\n"}, {"id": "encode", "parent": "#", "text": "encode", "type": "default"}, {"id": "encode/base64_", "parent": "encode", "text": "base64", "type": "module", "help": "usage: base64 [-h] [-v] [-i] [-g]\n\n    Base64 encode input data.\n    \n\noptional arguments:\n  -h, --help      show this help message and exit\n  -v, --verbose   show extra information\n  -i, --iterate   iterate input over newlines\n  -g, --generate  generate output with newlines\n"}, {"id": "listen", "parent": "#", "text": "listen", "type": "default"}, {"id": "listen/serve", "parent": "listen", "text": "serve", "type": "default"}, {"id": "listen/serve/lets", "parent": "listen/serve", "text": "lets", "type": "default"}, {"id": "listen/serve/lets/http_", "parent": "listen/serve/lets", "text": "http", "type": "module", "help": "usage: http [-h] [-v] [-i] [-g] [--interface INTERFACE] [-p PORT] [-s]\n            [--ssl-key SSL_KEY] [--ssl-cert SSL_CERT] [--path PATH]\n\n    Serve the lets framework over an HTTP API.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         show extra information\n  -i, --iterate         iterate input over newlines\n  -g, --generate        generate output with newlines\n\nmodule arguments:\n  --interface INTERFACE\n                        interface to listen on\n  -p PORT, --port PORT  port to listen on\n  -s, --ssl             use ssl\n  --ssl-key SSL_KEY     use ssl key\n  --ssl-cert SSL_CERT   use ssl certificate\n  --path PATH           api path prefix (default='/lets/')\n"}, {"id": "sample", "parent": "#", "text": "sample", "type": "default"}, {"id": "sample/mydockermodule_", "parent": "sample", "text": "mydockermodule", "type": "module", "help": "usage: mydockermodule [-h] [-v] [-i] [-g]\n\n    Open input data in an interactive hex editor\n    before passing it along.\n\n    Example:\n    $ echo 'test' | lets sample/mydockermodule | xxd\n    \n\noptional arguments:\n  -h, --help      show this help message and exit\n  -v, --verbose   show extra information\n  -i, --iterate   iterate input over newlines\n  -g, --generate  generate output with newlines\n"}, {"id": "sample/mymodule_", "parent": "sample", "text": "mymodule", "type": "module", "help": "usage: mymodule [-h] [-v] [-i] [-g] [-c COUNT]\n\n    Flip input data in reverse.\n    \n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         show extra information\n  -i, --iterate         iterate input over newlines\n  -g, --generate        generate output with newlines\n\nmodule arguments:\n  -c COUNT, --count COUNT\n                        number of bytes in each chunk\n"}]

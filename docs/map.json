looking for lets..__module__.py
No module named 'lets.'
looking for lets.support.autocomplete
<module 'lets.support.autocomplete' from '/data/projects/lets3/lets/support/autocomplete.py'>
['Autocomplete', 'Module', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'os', 'pkg_resources']
looking for lets.support.__pycache__.autocomplete.cpython-38
No module named 'lets.support.__pycache__.autocomplete'
looking for lets.sample.mydockermodule
<module 'lets.sample.mydockermodule' from '/data/projects/lets3/lets/sample/mydockermodule.py'>
['Container', 'Module', 'Mount', 'MyDockerModule', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
looking for lets.sample.mymodule
<module 'lets.sample.mymodule' from '/data/projects/lets3/lets/sample/mymodule.py'>
['Module', 'MyModule', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
looking for lets.sample.__pycache__.mymodule.cpython-38
No module named 'lets.sample.__pycache__.mymodule'
looking for lets.sample.__pycache__.mydockermodule.cpython-38
No module named 'lets.sample.__pycache__.mydockermodule'
looking for lets.listen.serve.lets.http
<module 'lets.listen.serve.lets.http' from '/data/projects/lets3/lets/listen/serve/lets/http.py'>
['Flask', 'Http', 'Module', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'importlib', 'os', 'request', 'ssl', 'sys', 'types']
looking for lets.listen.serve.lets.__pycache__.http.cpython-38
No module named 'lets.listen.serve.lets.__pycache__.http'
looking for lets.encode.base64
<module 'lets.encode.base64' from '/data/projects/lets3/lets/encode/base64.py'>
['Base64', 'Base64Tests', 'Module', 'TestCase', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'base64']
looking for lets.encode.__pycache__.base64.cpython-38
No module named 'lets.encode.__pycache__.base64'
looking for lets.decode.base64
<module 'lets.decode.base64' from '/data/projects/lets3/lets/decode/base64.py'>
['Base64', 'Base64Tests', 'Module', 'TestCase', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'base64']
looking for lets.decode.__pycache__.base64.cpython-38
No module named 'lets.decode.__pycache__.base64'
[{"id": "__pycache__", "parent": "#", "text": "__pycache__", "type": "default"}, {"id": "decode", "parent": "#", "text": "decode", "type": "default"}, {"id": "decode/__pycache__", "parent": "decode", "text": "__pycache__", "type": "default"}, {"id": "encode", "parent": "#", "text": "encode", "type": "default"}, {"id": "encode/__pycache__", "parent": "encode", "text": "__pycache__", "type": "default"}, {"id": "lets/decode/base64_", "parent": "decode", "text": "base64", "type": "module", "help": "usage: [INPUT] | lets/decode/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\nBase64 decode the provided data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/base64_", "parent": "encode", "text": "base64", "type": "module", "help": "usage: [INPUT] | lets/encode/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\nBase64 encode the provided data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/listen/serve/lets/http_", "parent": "listen/serve/lets", "text": "http", "type": "module", "help": "usage: [INPUT] | lets/listen/serve/lets/http [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                             [--interface INTERFACE] [-p PORT]\n                                             [-s] [--ssl-key KEY]\n                                             [--ssl-cert CERT]\n\nServe the lets framework over an HTTP API.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  --interface INTERFACE\n                        interface to listen on\n  -p PORT, --port PORT  port to listen on\n  -s, --ssl             use ssl\n  --ssl-key KEY         use ssl key\n  --ssl-cert CERT       use ssl certificate\n"}, {"id": "lets/sample/mydockermodule_", "parent": "sample", "text": "mydockermodule", "type": "module", "help": "usage: [INPUT] | lets/sample/mydockermodule [-h] [-i] [-g] [-o OUTPUT] [-v]\n\nOpen input data in an interactive hex editor before passing it along. Example:\n$ echo 'test' | lets sample/mydockermodule | xxd\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/sample/mymodule_", "parent": "sample", "text": "mymodule", "type": "module", "help": "usage: [INPUT] | lets/sample/mymodule [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                      [-c COUNT]\n\nFlip input data in reverse.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c COUNT, --count COUNT\n                        number of bytes in each chunk\n"}, {"id": "lets/support/autocomplete_", "parent": "support", "text": "autocomplete", "type": "module", "help": "usage: [INPUT] | lets/support/autocomplete [-h] [-i] [-g] [-o OUTPUT] [-v]\n                                           [{bash}]\n\nGenerate auto-completion material.\n\npositional arguments:\n  {bash}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "listen", "parent": "#", "text": "listen", "type": "default"}, {"id": "listen/serve", "parent": "listen", "text": "serve", "type": "default"}, {"id": "listen/serve/lets", "parent": "listen/serve", "text": "lets", "type": "default"}, {"id": "listen/serve/lets/__pycache__", "parent": "listen/serve/lets", "text": "__pycache__", "type": "default"}, {"id": "sample", "parent": "#", "text": "sample", "type": "default"}, {"id": "sample/__pycache__", "parent": "sample", "text": "__pycache__", "type": "default"}, {"id": "support", "parent": "#", "text": "support", "type": "default"}, {"id": "support/__pycache__", "parent": "support", "text": "__pycache__", "type": "default"}]

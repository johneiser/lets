[{"id": "decode", "parent": "#", "text": "decode", "type": "default"}, {"id": "encode", "parent": "#", "text": "encode", "type": "default"}, {"id": "lets/decode/base64_", "parent": "decode", "text": "base64", "type": "module", "help": "usage: decode/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\nBase64 decode the provided data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/encode/base64_", "parent": "encode", "text": "base64", "type": "module", "help": "usage: encode/base64 [-h] [-i] [-g] [-o OUTPUT] [-v]\n\nBase64 encode the provided data.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/listen/serve/lets/http_", "parent": "listen/serve/lets", "text": "http", "type": "module", "help": "usage: listen/serve/lets/http [-h] [-i] [-g] [-o OUTPUT] [-v]\n                              [--interface INTERFACE] [-p PORT] [-s] [-k KEY]\n                              [-c CERTIFICATE]\n\nServe the lets framework over an HTTP API. Usage: $ lets() { curl -skL --data-\nbinary @- \"http://localhost:5000/lets/$1\"; } $ echo \"abcd\" | lets\n\"encode/base64?generate=True\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  --interface INTERFACE\n                        interface to listen on\n  -p PORT, --port PORT  port to listen on\n  -s, --secure          use ssl\n  -k KEY, --key KEY     use ssl key\n  -c CERTIFICATE, --certificate CERTIFICATE\n                        use ssl certificate\n"}, {"id": "lets/sample/mydockermodule_", "parent": "sample", "text": "mydockermodule", "type": "module", "help": "usage: sample/mydockermodule [-h] [-i] [-g] [-o OUTPUT] [-v]\n\nOpen input data in an interactive hex editor before passing it along. Example:\n$ echo 'test' | lets sample/mydockermodule | xxd\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "lets/sample/mymodule_", "parent": "sample", "text": "mymodule", "type": "module", "help": "usage: sample/mymodule [-h] [-i] [-g] [-o OUTPUT] [-v] [-c COUNT]\n\nFlip input data in reverse.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n  -c COUNT, --count COUNT\n                        number of bytes in each chunk\n"}, {"id": "lets/support/autocomplete_", "parent": "support", "text": "autocomplete", "type": "module", "help": "usage: support/autocomplete [-h] [-i] [-g] [-o OUTPUT] [-v] [{bash}]\n\nGenerate auto-completion material.\n\npositional arguments:\n  {bash}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --iterate         iterate over input\n  -g, --generate        generate each output\n  -o OUTPUT, --output OUTPUT\n                        output to file\n  -v, --verbose         print debug info\n"}, {"id": "listen", "parent": "#", "text": "listen", "type": "default"}, {"id": "listen/serve", "parent": "listen", "text": "serve", "type": "default"}, {"id": "listen/serve/lets", "parent": "listen/serve", "text": "lets", "type": "default"}, {"id": "sample", "parent": "#", "text": "sample", "type": "default"}, {"id": "support", "parent": "#", "text": "support", "type": "default"}]
